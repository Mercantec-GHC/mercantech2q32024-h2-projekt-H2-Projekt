@page "/login"
@using Blazor.Auth
@using Blazor.Auth.Contracts
@using DomainModels.DTO
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider authState
@inject NavigationManager NavigationManager
@inject Blazor.Auth.AuthService authService
@inject HttpClient _http


<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Username" Class="mt-3"
                                  @bind-Value="model.Username" For="@(() => model.Username)" />
                    <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                                  @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">login</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Fill out the form correctly to see the success message.
            </MudText>
            @if(isInValid)
            {
                <MudText Typo="Typo.body2" Align="Align.Center">
                    Username or password is incorrect
                </MudText>
            }
        </MudItem>
    </MudGrid>
</EditForm>


@code {

    public LoginDTO? model = new LoginDTO();
    public bool isInValid;

    /// <summary>
    /// The OnValidSubmit function will be run once when clicked on the "Login" button
    /// </summary>
    public async void OnValidSubmit()
    {
        // response variable that will make the post request to the api to get the neccessary user information back from the logged in user.
        var response = await authService.Login(model!);
        if(response != null)
        {
            // Authenticate the user with the token that is returned from the api
            await ((AuthStateProvide)authState).AuthenticateUser(response.Token);
            NavigationManager.NavigateTo("/");
        } else
        {
            isInValid = true;
        }

    }
}