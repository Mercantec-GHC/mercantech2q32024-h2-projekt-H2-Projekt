// <auto-generated />
using System;
using System.Collections.Generic;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(HotelContext))]
    [Migration("20240827112608_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DomainModels.Booking", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("Userid")
                        .HasColumnType("integer");

                    b.Property<List<DateOnly>>("bookingDates")
                        .IsRequired()
                        .HasColumnType("date[]");

                    b.Property<string>("guestEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("guestName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("guestPhoneNr")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("Userid");

                    b.ToTable("bookings");
                });

            modelBuilder.Entity("DomainModels.Room", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("Bookingid")
                        .HasColumnType("integer");

                    b.Property<List<DateTime>>("bookedDays")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone[]");

                    b.Property<int>("price")
                        .HasColumnType("integer");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("Bookingid");

                    b.ToTable("rooms");
                });

            modelBuilder.Entity("DomainModels.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("phoneNr")
                        .HasColumnType("text");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("users");

                    b.HasDiscriminator().HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DomainModels.Employee", b =>
                {
                    b.HasBaseType("DomainModels.User");

                    b.HasDiscriminator().HasValue("Employee");
                });

            modelBuilder.Entity("DomainModels.Guest", b =>
                {
                    b.HasBaseType("DomainModels.User");

                    b.HasDiscriminator().HasValue("Guest");
                });

            modelBuilder.Entity("DomainModels.Cleaning", b =>
                {
                    b.HasBaseType("DomainModels.Employee");

                    b.HasDiscriminator().HasValue("Cleaning");
                });

            modelBuilder.Entity("DomainModels.Receptionist", b =>
                {
                    b.HasBaseType("DomainModels.Employee");

                    b.HasDiscriminator().HasValue("Receptionist");
                });

            modelBuilder.Entity("DomainModels.Administrator", b =>
                {
                    b.HasBaseType("DomainModels.Receptionist");

                    b.HasDiscriminator().HasValue("Administrator");
                });

            modelBuilder.Entity("DomainModels.Booking", b =>
                {
                    b.HasOne("DomainModels.User", null)
                        .WithMany("bookings")
                        .HasForeignKey("Userid");
                });

            modelBuilder.Entity("DomainModels.Room", b =>
                {
                    b.HasOne("DomainModels.Booking", null)
                        .WithMany("rooms")
                        .HasForeignKey("Bookingid");
                });

            modelBuilder.Entity("DomainModels.Booking", b =>
                {
                    b.Navigation("rooms");
                });

            modelBuilder.Entity("DomainModels.User", b =>
                {
                    b.Navigation("bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
